var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.535,1,1.744]],["body/modules/AppModule.html",[0,2.292,1,3.051,2,1.445,3,1.445,4,1.888,5,1.888,6,1.445,7,1.888,8,1.888,9,2.218,10,2.218,11,2.685,12,0.044,13,2.612,14,1.888,15,1.888,16,0.429,17,0.367,18,0.367,19,2.719,20,3.068,21,1.829,22,2.612,23,1.141,24,2.719,25,3.761,26,3.761,27,1.642,28,2.612,29,2.719,30,1.281,31,1.121,32,2.719,33,2.719,34,2.719,35,2.719,36,3.761,37,2.995,38,2.719,39,2.719,40,2.719,41,2.719,42,1.642,43,2.719,44,2.719,45,2.719,46,2.719,47,3.761,48,2.719,49,2.719,50,0.429,51,0.429,52,0.029,53,0.029]],["title/controllers/AuthController.html",[54,1.744,55,1.744]],["body/controllers/AuthController.html",[12,0.044,16,0.339,17,0.291,18,0.291,21,1.67,23,0.902,50,0.339,51,0.339,52,0.024,53,0.024,54,1.298,55,1.92,56,1.754,57,1.754,58,2.151,59,2.151,60,0.339,61,1.92,62,4.181,63,3.18,64,2.594,65,3.18,66,3.41,67,1.97,68,2.151,69,2.524,70,2.151,71,1.004,72,3.18,73,2.151,74,2.284,75,2.284,76,0.868,77,1.783,78,1.92,79,2.151,80,2.221,81,4.181,82,4.181,83,4.181,84,2.151,85,2.151,86,3.41,87,2.151,88,2.102,89,2.151,90,2.151,91,2.151,92,2.151,93,2.151,94,3.18,95,1.587,96,1.493,97,2.151,98,3.18,99,2.151,100,1.493,101,1.754,102,1.493,103,1.754,104,2.151,105,2.151,106,1.754,107,1.298,108,3.18,109,2.151,110,2.221,111,2.151,112,2.151,113,2.151,114,2.151,115,2.151,116,2.151,117,2.151]],["title/modules/AuthModule.html",[0,1.535,11,1.535]],["body/modules/AuthModule.html",[0,2.181,2,1.318,3,1.318,4,1.723,5,1.723,6,1.318,7,2.85,8,1.723,11,2.741,12,0.044,13,2.449,14,1.723,15,1.723,16,0.391,17,0.335,18,0.335,20,2.024,21,1.931,22,2.449,23,1.041,30,1.169,50,0.391,51,0.391,52,0.027,53,0.027,55,2.478,56,2.877,95,2.058,96,1.723,110,1.318,118,2.024,119,2.024,120,2.312,121,2.481,122,2.481,123,2.024,124,2.481,125,1.723,126,2.481,127,1.723,128,2.698,129,1.052,130,2.481,131,2.481,132,2.481,133,1.723,134,2.481,135,2.481,136,1.723,137,1.318,138,2.481,139,1.723,140,2.481,141,2.481,142,0.929,143,2.024,144,2.481]],["title/injectables/AuthService.html",[95,1.212,145,1.535]],["body/injectables/AuthService.html",[12,0.044,16,0.174,17,0.149,18,0.149,21,1.616,22,2.411,23,0.462,27,0.665,28,1.685,30,0.519,42,1.725,50,0.174,51,0.174,52,0.014,53,0.014,60,0.174,61,1.126,64,1.522,67,1.976,69,2.448,71,1.261,74,2.448,75,2.448,76,0.972,77,1.91,78,1.725,80,1.518,86,0.898,88,1.346,95,0.782,101,0.898,102,0.764,103,0.898,107,1.93,110,2.068,120,1.743,123,0.898,125,0.764,128,2.234,129,0.556,136,2.815,137,1.845,139,0.764,142,0.412,143,0.898,145,0.991,146,0.764,147,0.898,148,1.865,149,3.757,150,1.865,151,1.865,152,1.865,153,1.865,154,2.857,155,1.865,156,1.295,157,1.101,158,2.857,159,3.7,160,2.427,161,1.101,162,1.865,163,1.101,164,2.832,165,2.411,166,1.865,167,2.832,168,1.101,169,1.865,170,1.101,171,1.865,172,1.101,173,1.465,174,1.865,175,1.101,176,1.101,177,1.101,178,1.865,179,1.101,180,1.101,181,1.101,182,1.865,183,1.101,184,1.865,185,1.101,186,2.832,187,1.685,188,1.101,189,0.898,190,1.101,191,1.101,192,1.101,193,2.569,194,0.665,195,1.101,196,1.101,197,1.101,198,1.522,199,1.98,200,1.101,201,1.865,202,1.522,203,1.126,204,1.29,205,1.101,206,1.101,207,2.427,208,1.865,209,2.33,210,1.101,211,1.865,212,1.865,213,1.101,214,1.101,215,1.101,216,1.101,217,1.101,218,1.101,219,1.865,220,1.101,221,1.101,222,1.101,223,0.898,224,1.101,225,0.898,226,1.101,227,1.101,228,1.101,229,1.101,230,1.101,231,1.101,232,1.865,233,0.898,234,1.101]],["title/interfaces/Config.html",[31,0.861,235,0.599]],["body/interfaces/Config.html",[12,0.043,16,0.441,17,0.378,18,0.378,31,1.144,50,0.778,52,0.029,53,0.029,60,0.441,71,1.385,76,0.977,129,1.404,142,1.047,235,1.024,236,1.174,237,1.318,238,1.144,239,2.219,240,1.976,241,2.219,242,2.219,243,1.976,244,1.976,245,1.976,246,1.318,247,1.807,248,1.807,249,2.038,250,1.318,251,1.047,252,1.174,253,1.318,254,1.318,255,1.318]],["title/interfaces/CorsConfig.html",[235,0.599,243,1.212]],["body/interfaces/CorsConfig.html",[12,0.043,16,0.483,17,0.414,18,0.414,31,0.913,50,0.803,52,0.031,53,0.031,60,0.483,71,1.418,76,0.636,129,1.216,142,1.146,235,1.056,236,1.285,237,1.443,238,1.216,239,1.443,240,1.285,241,1.443,242,1.443,243,1.923,244,1.711,245,1.711,246,1.443,247,1.921,248,2.398,249,2.597,250,1.443,251,1.146,252,1.285,253,1.443,254,1.443,255,1.443]],["title/classes/CreateUserDto.html",[51,0.455,88,1.361]],["body/classes/CreateUserDto.html",[12,0.043,16,0.409,17,0.351,18,0.351,21,1.363,50,0.409,51,0.574,52,0.028,53,0.028,60,0.409,66,3.917,67,2.262,71,1.385,76,0.997,77,2.148,88,1.715,193,2.528,194,1.566,203,2.539,204,2.235,238,1.085,256,1.379,257,4.061,258,1.802,259,2.92,260,2.92,261,3.457,262,2.594,263,2.594,264,4.802,265,2.594,266,2.594,267,4.802,268,2.594,269,2.116,270,2.116,271,2.594,272,2.594,273,3.64,274,2.594,275,2.116,276,2.594]],["title/classes/JwtStrategy.html",[51,0.455,277,2.006]],["body/classes/JwtStrategy.html",[12,0.044,16,0.386,17,0.33,18,0.33,21,1.828,23,1.026,30,1.152,31,1.214,42,1.476,50,0.386,51,0.386,52,0.027,53,0.027,60,0.386,61,2.107,67,1.645,69,1.476,71,0.649,74,2.107,75,2.107,76,0.921,77,1.645,95,2.049,96,1.698,107,2.107,110,1.299,127,1.698,128,2.681,133,2.827,136,2.827,137,1.299,139,1.698,149,1.994,156,2.424,164,1.994,165,2.424,167,2.847,186,1.994,193,3.083,194,1.476,199,1.994,209,1.994,256,1.299,277,2.424,278,1.994,279,2.847,280,3.491,281,3.491,282,2.445,283,2.445,284,3.491,285,2.445,286,2.445,287,2.445,288,2.445,289,1.994,290,3.491,291,2.445,292,2.445,293,2.445,294,2.445,295,2.445]],["title/classes/LoginDto.html",[51,0.455,80,1.535]],["body/classes/LoginDto.html",[12,0.044,16,0.577,17,0.494,18,0.494,21,1.712,50,0.577,51,0.577,52,0.035,53,0.035,80,2.429,88,1.723,100,2.539,102,2.539,137,2.429,202,2.982,203,2.76,204,2.429,256,1.943,279,3.73,296,2.982,297,4.572,298,3.656]],["title/interfaces/NestConfig.html",[235,0.599,244,1.212]],["body/interfaces/NestConfig.html",[12,0.043,16,0.483,17,0.414,18,0.414,31,0.913,50,0.803,52,0.031,53,0.031,60,0.483,71,1.418,76,0.636,129,1.216,142,1.146,235,1.056,236,1.285,237,1.443,238,1.216,239,1.443,240,1.285,241,1.443,242,1.443,243,1.711,244,1.923,245,1.711,246,2.303,247,2.303,248,1.921,249,2.167,250,1.443,251,1.146,252,1.285,253,1.443,254,1.443,255,1.443]],["title/injectables/PasswordService.html",[120,1.361,145,1.535]],["body/injectables/PasswordService.html",[12,0.044,16,0.379,17,0.325,18,0.325,21,1.649,23,1.008,30,1.131,50,0.379,51,0.379,52,0.026,53,0.026,60,0.379,61,2.081,67,2.075,69,2.081,71,1.403,74,2.434,75,2.434,76,0.836,77,1.899,106,1.959,107,1.45,110,2.142,120,1.624,128,2.931,129,1.028,137,1.831,145,1.831,146,1.668,156,1.668,165,2.393,189,1.959,198,3.593,203,2.081,233,1.959,247,1.131,299,1.959,300,3.446,301,3.446,302,3.446,303,4.031,304,2.402,305,2.402,306,3.446,307,2.402,308,3.446,309,2.402,310,2.402,311,2.402,312,2.402,313,2.402,314,1.959,315,3.446,316,2.402,317,2.402,318,2.402,319,2.402,320,2.402,321,2.402]],["title/interfaces/SecurityConfig.html",[129,0.861,235,0.599]],["body/interfaces/SecurityConfig.html",[12,0.044,16,0.447,17,0.383,18,0.383,31,0.845,50,0.782,52,0.029,53,0.029,60,0.447,71,1.487,76,0.914,129,1.314,142,1.772,235,1.029,236,1.188,237,1.334,238,1.153,239,1.334,240,1.188,241,1.334,242,1.334,243,1.623,244,1.623,245,1.623,246,1.334,247,2.231,248,1.823,249,2.056,250,1.334,251,1.06,252,1.188,253,1.334,254,2.231,255,2.231]],["title/interfaces/SelectUser.html",[235,0.599,322,2.006]],["body/interfaces/SelectUser.html",[12,0.039,16,0.55,17,0.471,18,0.471,37,3.684,50,0.55,52,0.034,53,0.034,60,0.55,77,2.42,78,3.102,204,2.73,235,0.724,236,1.463,238,1.323,258,2.421,259,3.567,260,3.567,261,3.567,322,3.081,323,2.845]],["title/interfaces/SwaggerConfig.html",[235,0.599,245,1.212]],["body/interfaces/SwaggerConfig.html",[12,0.043,16,0.429,17,0.367,18,0.367,31,0.811,50,0.77,52,0.029,53,0.029,60,0.429,71,1.495,76,1.014,129,1.121,142,1.018,235,1.014,236,1.141,237,1.281,238,1.121,239,1.281,240,1.141,241,1.281,242,1.281,243,1.578,244,1.578,245,1.809,246,1.281,247,1.772,248,2.301,249,2.473,250,2.192,251,1.742,252,1.952,253,2.192,254,1.281,255,1.281]],["title/classes/TokenDto.html",[51,0.455,173,1.744]],["body/classes/TokenDto.html",[12,0.042,16,0.586,17,0.502,18,0.502,50,0.586,51,0.586,52,0.035,53,0.035,60,0.586,67,2.176,71,1.395,76,0.958,173,2.788,223,4.099,225,4.099,238,1.377,256,1.975,324,3.031,325,3.716,326,3.716]],["title/coverage.html",[327,2.722]],["body/coverage.html",[6,1.4,12,0.043,18,0.356,31,1.097,42,1.591,51,0.724,52,0.028,53,0.028,54,1.591,55,1.591,57,2.149,76,0.547,80,1.4,88,1.241,95,1.105,120,1.241,129,0.786,145,1.955,147,2.149,173,1.591,187,1.829,235,1.038,237,2.275,243,1.105,244,1.105,245,1.105,257,2.149,258,2.555,277,1.829,278,2.149,296,2.149,299,2.149,322,1.829,323,2.149,324,2.149,327,1.829,328,2.635,329,2.635,330,2.635,331,5.636,332,3.68,333,2.635,334,4.241,335,4.59,336,3.68,337,3.68,338,3.68,339,2.149,340,3.68,341,2.149,342,2.149,343,2.635,344,2.635,345,2.635]],["title/dependencies.html",[3,1.843,346,1.976]],["body/dependencies.html",[3,1.712,12,0.044,23,1.352,27,1.945,28,2.928,30,1.518,51,0.665,52,0.032,53,0.032,100,2.238,125,2.238,127,2.238,133,2.238,194,1.945,275,2.629,289,3.44,314,2.629,347,4.701,348,3.222,349,3.222,350,3.222,351,3.222,352,3.222,353,3.222,354,4.217,355,3.222,356,3.222,357,3.222,358,3.222,359,3.222,360,3.222,361,3.222,362,3.222,363,3.222,364,3.222,365,3.222,366,3.222,367,3.222,368,3.222,369,3.222]],["title/miscellaneous/functions.html",[370,1.463,371,2.829]],["body/miscellaneous/functions.html",[6,2.838,12,0.038,52,0.038,53,0.038,60,0.675,342,3.49,370,2.583,371,3.49,372,4.278]],["title/index.html",[60,0.382,373,2.423,374,2.423]],["body/index.html",[12,0.043,17,0.373,52,0.029,53,0.029,240,1.825,251,1.034,327,1.919,375,2.763,376,2.763,377,3.803,378,2.763,379,2.763,380,2.763,381,2.763,382,2.763,383,2.763,384,2.763,385,2.763,386,2.763,387,2.763,388,4.349,389,5.202,390,2.763,391,2.763,392,2.763,393,5.078,394,2.763,395,2.763,396,3.803,397,2.763,398,2.763,399,2.763,400,2.763,401,3.803,402,3.803,403,2.763,404,2.763,405,2.763,406,3.803,407,3.803,408,2.763,409,2.763,410,2.763,411,2.763,412,2.763,413,2.254,414,2.763,415,2.763,416,2.763,417,2.763,418,2.763,419,2.763,420,2.763,421,2.763,422,2.763,423,2.763,424,2.254,425,2.763,426,2.763,427,2.763,428,2.763,429,2.763,430,2.763,431,2.254]],["title/modules.html",[2,2.083]],["body/modules.html",[1,2.535,2,2.231,11,2.231,12,0.038,52,0.038,53,0.038,413,4.057,432,4.974,433,4.974,434,4.974]],["title/overview.html",[435,3.198]],["body/overview.html",[0,1.834,1,3.09,2,1.834,3,1.834,4,2.397,5,2.397,6,1.834,7,2.397,8,2.397,9,2.816,10,2.816,11,2.921,12,0.04,13,3.061,14,2.397,15,2.397,52,0.033,53,0.033,54,2.084,95,2.038,118,2.816,119,2.816,120,2.289,146,2.397,236,1.448,256,1.834,435,2.816,436,4.409,437,3.452,438,3.452,439,3.452]],["title/properties.html",[238,1.034,346,1.976]],["body/properties.html",[12,0.043,52,0.038,53,0.038,238,1.252,251,1.572,252,1.761,424,3.425,431,3.425,440,4.199,441,4.199]],["title/miscellaneous/variables.html",[370,1.463,442,2.829]],["body/miscellaneous/variables.html",[12,0.044,27,1.841,31,1.364,37,3.706,52,0.031,53,0.031,60,0.481,76,0.844,78,1.841,142,1.141,187,2.823,204,1.62,239,1.436,240,1.706,241,1.436,242,1.436,246,1.436,248,1.915,250,1.436,251,1.141,252,1.279,253,1.436,254,1.436,255,1.436,259,2.117,260,2.117,261,2.117,269,3.316,270,3.316,339,2.487,341,2.487,370,1.841,442,2.487,443,3.049,444,3.049,445,3.049,446,4.065,447,3.049,448,3.049,449,3.049,450,3.049,451,3.049,452,3.049,453,3.049]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":440,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":437,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10",{"_index":452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.3",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":436,"title":{},"body":{"overview.html":{}}}],["2m",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.1.1",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":438,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["5.8.1",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":439,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.0",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":302,"title":{},"body":{"injectables/PasswordService.html":{}}}],["accesstoken",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["amazing",{"_index":414,"title":{},"body":{"index.html":{}}}],["api",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiconsumes",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('application/x",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicreatedresponse",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('auth",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":391,"title":{},"body":{"index.html":{}}}],["applications",{"_index":383,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["auth",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":424,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":95,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.name",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["backers",{"_index":415,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":314,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["bcryptsaltorround",{"_index":255,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["bcryptsaltrounds",{"_index":303,"title":{},"body":{"injectables/PasswordService.html":{}}}],["body",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":249,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":434,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":432,"title":{},"body":{"modules.html":{}}}],["building",{"_index":378,"title":{},"body":{"index.html":{}}}],["built",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["catch",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":51,"title":{"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/TokenDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PasswordService.html":{},"classes/TokenDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/TokenDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["common/configs/config",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["common/configs/config.interface",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["common/configs/constants/user.constants",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare",{"_index":313,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":319,"title":{},"body":{"injectables/PasswordService.html":{}}}],["config",{"_index":31,"title":{"interfaces/Config.html":{}},"body":{"modules/AppModule.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/JwtStrategy.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.get('jwt_access_secret",{"_index":294,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["configservice.get('jwt_access_secret",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('security",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["const",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PasswordService.html":{}}}],["constructor",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["constructor(authservice",{"_index":282,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["constructor(configservice",{"_index":304,"title":{},"body":{"injectables/PasswordService.html":{}}}],["constructor(prisma",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PasswordService.html":{}}}],["controller",{"_index":54,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["cors",{"_index":239,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":243,"title":{"interfaces/CorsConfig.html":{}},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["coverage",{"_index":327,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["createuser",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser(payload",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":88,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["createuserdto})@post",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["data",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dbml",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["decorators",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["default",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/TokenDto.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":251,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":392,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login.dto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/token.dto",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":403,"title":{},"body":{"index.html":{}}}],["ecommerce",{"_index":446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":379,"title":{},"body":{"index.html":{}}}],["email",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"interfaces/SelectUser.html":{},"miscellaneous/variables.html":{}}}],["enabled",{"_index":248,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["example",{"_index":388,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["express",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":279,"title":{},"body":{"classes/JwtStrategy.html":{},"classes/LoginDto.html":{}}}],["extractjwt",{"_index":287,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":293,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["file",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["findallusers",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["finduser",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["finduser(@param('id",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["finduser(id",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["firstname",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SelectUser.html":{},"miscellaneous/variables.html":{}}}],["form",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["found",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":377,"title":{},"body":{"index.html":{}}}],["function",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":371,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(payload",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(payload",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(payload",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["get('user/:id",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["getbcryptsaltrounds",{"_index":310,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getting",{"_index":373,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuser(id",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["getusers",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["grow",{"_index":410,"title":{},"body":{"index.html":{}}}],["hash",{"_index":312,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":320,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashedpassword",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["hashpassword",{"_index":300,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashpassword(password",{"_index":306,"title":{},"body":{"injectables/PasswordService.html":{}}}],["here",{"_index":421,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":428,"title":{},"body":{"index.html":{}}}],["id",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/SelectUser.html":{},"miscellaneous/variables.html":{}}}],["id(s",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PasswordService.html":{}}}],["imports",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":60,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{}}}],["inject",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":145,"title":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{}}}],["injectables",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"overview.html":{}}}],["installation",{"_index":387,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":390,"title":{},"body":{"index.html":{}}}],["interface",{"_index":235,"title":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["interfaces",{"_index":236,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('failed",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdefined",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdefined()@isemail",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdefined()@isenum(role",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(role",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":417,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":292,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwtmodule",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":277,"title":{"classes/JwtStrategy.html":{}},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["kamil",{"_index":425,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SelectUser.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["license",{"_index":431,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":407,"title":{},"body":{"index.html":{}}}],["literal",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["load",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["logger('prismamiddleware",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["logger(message",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["logging",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["loggingmiddleware",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(data",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":80,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["loglevel",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["logmessage",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["middlewares",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":370,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":406,"title":{},"body":{"index.html":{}}}],["mode",{"_index":396,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":420,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":426,"title":{},"body":{"index.html":{}}}],["name",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["nest",{"_index":240,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nestconfig",{"_index":244,"title":{"interfaces/NestConfig.html":{}},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["nestframework",{"_index":430,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"dependencies.html":{}}}],["new",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"coverage.html":{}}}],["node.js",{"_index":376,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`no",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`user",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":247,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{}}}],["number(saltorrounds",{"_index":318,"title":{},"body":{"injectables/PasswordService.html":{}}}],["number.isinteger(number(saltorrounds",{"_index":317,"title":{},"body":{"injectables/PasswordService.html":{}}}],["object",{"_index":453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":408,"title":{},"body":{"index.html":{}}}],["optional",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{},"interfaces/SelectUser.html":{}}}],["out",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["overview",{"_index":435,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":346,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["parseint(process.env.port",{"_index":445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":289,"title":{},"body":{"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":286,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":280,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["password",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"injectables/PasswordService.html":{}}}],["password.service",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["passwordservice",{"_index":120,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["passwordvalid",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":253,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["payload.email",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.email.tolowercase",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.password",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["picktype",{"_index":298,"title":{},"body":{"classes/LoginDto.html":{}}}],["picktype(createuserdto",{"_index":297,"title":{},"body":{"classes/LoginDto.html":{}}}],["please",{"_index":418,"title":{},"body":{"index.html":{}}}],["port",{"_index":246,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["prisma",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["prisma/client",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["prismamodule",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["prismamodule.forroot",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaservice",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaserviceoptions",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["private",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["production",{"_index":398,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":375,"title":{},"body":{"index.html":{}}}],["project",{"_index":409,"title":{},"body":{"index.html":{}}}],["promise",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["properties",{"_index":238,"title":{"properties.html":{}},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["query",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["query.executiontime}ms",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["query.model}.${query.action",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["queryinfo",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":419,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["reflect",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["refreshin",{"_index":254,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["register",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(data",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["repository",{"_index":386,"title":{},"body":{"index.html":{}}}],["reset",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["results",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["returns",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["role",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SelectUser.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":393,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["saltorrounds",{"_index":315,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalable",{"_index":380,"title":{},"body":{"index.html":{}}}],["secret",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["security",{"_index":241,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["securityconfig",{"_index":129,"title":{"interfaces/SecurityConfig.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["securityconfig.bcryptsaltorround",{"_index":316,"title":{},"body":{"injectables/PasswordService.html":{}}}],["securityconfig.expiresin",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["select",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["selectuser",{"_index":322,"title":{"interfaces/SelectUser.html":{}},"body":{"interfaces/SelectUser.html":{},"coverage.html":{}}}],["server",{"_index":381,"title":{},"body":{"index.html":{}}}],["side",{"_index":382,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SelectUser.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"index.html":{}}}],["sponsors",{"_index":412,"title":{},"body":{"index.html":{}}}],["src/.../config.ts",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.constants.ts",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:100",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:104",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:73",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:86",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:90",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":296,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/select",{"_index":323,"title":{},"body":{"interfaces/SelectUser.html":{},"coverage.html":{}}}],["src/auth/dto/token.dto.ts",{"_index":324,"title":{},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/token.dto.ts:2",{"_index":325,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/dto/token.dto.ts:3",{"_index":326,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":278,"title":{},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:19",{"_index":285,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":283,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/auth/password.service.ts",{"_index":299,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["src/auth/password.service.ts:14",{"_index":305,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/auth/password.service.ts:17",{"_index":309,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/auth/password.service.ts:21",{"_index":307,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/auth/password.service.ts:8",{"_index":311,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/configs/config.interface",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/common/configs/config.interface.ts",{"_index":237,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["src/common/configs/config.ts",{"_index":339,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/configs/constants/user.constants.ts",{"_index":341,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":394,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":397,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":399,"title":{},"body":{"index.html":{}}}],["started",{"_index":374,"title":{"index.html":{}},"body":{}}],["starter",{"_index":385,"title":{},"body":{"index.html":{}}}],["statements",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":422,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":288,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["string",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{}}}],["super",{"_index":291,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["support",{"_index":413,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":433,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":242,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":245,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["table",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":402,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":405,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":404,"title":{},"body":{"index.html":{}}}],["tests",{"_index":401,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":411,"title":{},"body":{"index.html":{}}}],["this.authservice.createuser(data",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getuser(id",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getusers",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(data",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload.userid",{"_index":295,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["this.bcryptsaltrounds",{"_index":321,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('security",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["this.generateaccesstoken(payload",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(payload",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetokens",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logging.log(message",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.hashpassword",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.validatepassword",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findmany",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["title",{"_index":250,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokendto",{"_index":173,"title":{"classes/TokenDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["touch",{"_index":423,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"interfaces/SelectUser.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["twitter",{"_index":429,"title":{},"body":{"index.html":{}}}],["type",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{},"interfaces/NestConfig.html":{},"injectables/PasswordService.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"classes/TokenDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":384,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":290,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["unit",{"_index":400,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["unlicensed",{"_index":441,"title":{},"body":{"properties.html":{}}}],["urlencoded",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["urlencoded')@apicreatedresponse({type",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["urlencoded')@post('login",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["usefactory",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JwtStrategy.html":{}}}],["user.dto",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["user.dto.ts",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SelectUser.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:13",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_select",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["validate",{"_index":281,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validate(payload",{"_index":284,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validatepassword",{"_index":301,"title":{},"body":{"injectables/PasswordService.html":{}}}],["validatepassword(password",{"_index":308,"title":{},"body":{"injectables/PasswordService.html":{}}}],["validateuser",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(userid",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":442,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":252,"title":{},"body":{"interfaces/Config.html":{},"interfaces/CorsConfig.html":{},"interfaces/NestConfig.html":{},"interfaces/SecurityConfig.html":{},"interfaces/SwaggerConfig.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["watch",{"_index":395,"title":{},"body":{"index.html":{}}}],["website",{"_index":427,"title":{},"body":{"index.html":{}}}],["www",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["yarn",{"_index":389,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":416,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { PrismaModule, QueryInfo, loggingMiddleware } from 'nestjs-prisma';\nimport { ConfigModule } from '@nestjs/config';\nimport config from './common/configs/config';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [config],\n      isGlobal: true,\n      cache: true,\n    }),\n    PrismaModule.forRoot({\n      isGlobal: true,\n      prismaServiceOptions: {\n        middlewares: [\n          loggingMiddleware({\n            logger: new Logger('PrismaMiddleware'),\n            logLevel: 'log',\n            logMessage: (query: QueryInfo) =>\n              `[Prisma Query] ${query.model}.${query.action} +${query.executionTime}ms`,\n          }),\n        ],\n      },\n    }),\n    AuthModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAllUsers\n                            \n                            \n                                    \n                                findUser\n                            \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiConsumes('application/x-www-form-urlencoded')@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiConsumes('application/x-www-form-urlencoded')@ApiCreatedResponse({type: CreateUserDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ApiConsumes, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { LoginDto } from './dto/login.dto';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @ApiCreatedResponse({ type: CreateUserDto })\n  @Post()\n  register(@Body() data: CreateUserDto) {\n    return this.authService.createUser(data);\n  }\n\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @Post('login')\n  login(@Body() data: LoginDto) {\n    return this.authService.login(data);\n  }\n\n  @Get()\n  findAllUsers() {\n    return this.authService.getUsers();\n  }\n\n  @Get('user/:id')\n  findUser(@Param('id') id: string) {\n    return this.authService.getUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { PasswordService } from './password.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\nimport { SecurityConfig } from 'src/common/configs/config.interface';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      useFactory: async (configService: ConfigService) => {\n        const securityConfig = configService.get('security');\n        return {\n          secret: configService.get('JWT_ACCESS_SECRET'),\n          signOptions: {\n            expiresIn: securityConfig.expiresIn,\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, PasswordService, Logger],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                generateAccessToken\n                            \n                            \n                                    Private\n                                generateRefreshToken\n                            \n                            \n                                generateTokens\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                getUsers\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService, configService: ConfigService, passwordService: PasswordService, logging: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logging\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(payload: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRefreshToken(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTokens\n                        \n                    \n                \n            \n            \n                \ngenerateTokens(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n            \n                \n                        \n                    logger(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(payload: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateUser\n                        \n                    \n                \n            \n            \n                \nvalidateUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { USER_SELECT } from './../common/configs/constants/user.constants';\nimport { SecurityConfig } from './../common/configs/config.interface';\nimport {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from 'nestjs-prisma';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User } from '@prisma/client';\nimport { TokenDto } from './dto/token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PasswordService } from './password.service';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly passwordService: PasswordService,\n    private readonly logging: Logger,\n  ) {}\n\n  private logger(message: string) {\n    this.logging.log(message, AuthService.name);\n  }\n\n  async createUser(payload: CreateUserDto): Promise {\n    const hashedPassword = await this.passwordService.hashPassword(\n      payload.password,\n    );\n    const create = {\n      ...payload,\n      password: hashedPassword,\n      email: payload.email.toLowerCase(),\n    };\n\n    return this.prisma.user.create({ data: create });\n  }\n\n  async login(payload: LoginDto): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { email: payload.email },\n    });\n\n    if (!user) {\n      throw new NotFoundException(`No user found for email: ${payload.email}`);\n    }\n\n    const passwordValid = this.passwordService.validatePassword(\n      payload.password,\n      user.password,\n    );\n\n    if (!passwordValid) {\n      throw new BadRequestException('Invalid password');\n    }\n\n    return this.generateTokens({ userId: user.id });\n  }\n\n  getUsers() {\n    return this.prisma.user.findMany({\n      select: USER_SELECT,\n    });\n  }\n\n  async getUser(id: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id },\n      select: USER_SELECT,\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID(s): ${id} not found`);\n    }\n\n    return user;\n  }\n\n  validateUser(userId: string): Promise {\n    return this.prisma.user.findUnique({ where: { id: userId } });\n  }\n\n  generateTokens(payload: { userId: string }): TokenDto {\n    try {\n      return {\n        accessToken: this.generateAccessToken(payload),\n        refreshToken: this.generateRefreshToken(payload),\n      };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to generate token');\n    }\n  }\n  private generateAccessToken(payload: { userId: string }): string {\n    return this.jwtService.sign(payload);\n  }\n\n  private generateRefreshToken(payload: { userId: string }): string {\n    const securityConfig = this.configService.get('security');\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n      expiresIn: securityConfig.expiresIn,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/configs/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cors\n                                        \n                                \n                                \n                                        \n                                            nest\n                                        \n                                \n                                \n                                        \n                                            security\n                                        \n                                \n                                \n                                        \n                                            swagger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cors:         CorsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CorsConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nest\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nest:         NestConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NestConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        security\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        security:         SecurityConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SecurityConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         SwaggerConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SwaggerConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Config {\n  nest: NestConfig;\n  cors: CorsConfig;\n  swagger: SwaggerConfig;\n  security: SecurityConfig;\n}\n\nexport interface NestConfig {\n  port: number;\n}\n\nexport interface CorsConfig {\n  enabled: boolean;\n}\n\nexport interface SwaggerConfig {\n  enabled: boolean;\n  title: string;\n  description: string;\n  version: string;\n  path: string;\n}\n\nexport interface SecurityConfig {\n  expiresIn: string;\n  refreshIn: string;\n  bcryptSaltOrRound: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CorsConfig.html":{"url":"interfaces/CorsConfig.html","title":"interface - CorsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CorsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/configs/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enabled\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Config {\n  nest: NestConfig;\n  cors: CorsConfig;\n  swagger: SwaggerConfig;\n  security: SecurityConfig;\n}\n\nexport interface NestConfig {\n  port: number;\n}\n\nexport interface CorsConfig {\n  enabled: boolean;\n}\n\nexport interface SwaggerConfig {\n  enabled: boolean;\n  title: string;\n  description: string;\n  version: string;\n  path: string;\n}\n\nexport interface SecurityConfig {\n  expiresIn: string;\n  refreshIn: string;\n  bcryptSaltOrRound: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Default value : 'USER'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsDefined, IsEmail, IsEnum, IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsDefined()\n  @IsEmail()\n  email: string;\n\n  @IsDefined()\n  password: string;\n\n  @IsString()\n  firstName?: string;\n\n  @IsString()\n  lastName?: string;\n\n  @IsDefined()\n  @IsEnum(Role)\n  role: Role = 'USER';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStrategy.html":{"url":"classes/JwtStrategy.html","title":"class - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from './auth.service';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { User } from '@prisma/client';\n\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private readonly authService: AuthService,\n    readonly config: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secret: config.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  async validate(payload: { userId: string }): Promise {\n    const user = await this.authService.validateUser(payload.userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(CreateUserDto, [\n  'email',\n  'password',\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginDto extends PickType(CreateUserDto, [\n  'email',\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NestConfig.html":{"url":"interfaces/NestConfig.html","title":"interface - NestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NestConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/configs/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Config {\n  nest: NestConfig;\n  cors: CorsConfig;\n  swagger: SwaggerConfig;\n  security: SecurityConfig;\n}\n\nexport interface NestConfig {\n  port: number;\n}\n\nexport interface CorsConfig {\n  enabled: boolean;\n}\n\nexport interface SwaggerConfig {\n  enabled: boolean;\n  title: string;\n  description: string;\n  version: string;\n  path: string;\n}\n\nexport interface SecurityConfig {\n  expiresIn: string;\n  refreshIn: string;\n  bcryptSaltOrRound: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hashPassword\n                            \n                            \n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    bcryptSaltRounds\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/password.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n            \n                \nhashPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validatePassword\n                        \n                    \n                \n            \n            \n                \nvalidatePassword(password: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        bcryptSaltRounds\n                    \n                \n\n                \n                    \n                        getbcryptSaltRounds()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/password.service.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { hash, compare } from 'bcrypt';\nimport { SecurityConfig } from './../common/configs/config.interface';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class PasswordService {\n  get bcryptSaltRounds(): string | number {\n    const securityConfig = this.configService.get('security');\n    const saltOrRounds = securityConfig.bcryptSaltOrRound;\n    return Number.isInteger(Number(saltOrRounds))\n      ? Number(saltOrRounds)\n      : saltOrRounds;\n  }\n  constructor(private readonly configService: ConfigService) {}\n\n  validatePassword(password: string, hashedPassword: string): Promise {\n    return compare(password, hashedPassword);\n  }\n\n  hashPassword(password: string) {\n    return hash(password, this.bcryptSaltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SecurityConfig.html":{"url":"interfaces/SecurityConfig.html","title":"interface - SecurityConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SecurityConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/configs/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bcryptSaltOrRound\n                                        \n                                \n                                \n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                        \n                                            refreshIn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bcryptSaltOrRound\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bcryptSaltOrRound:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Config {\n  nest: NestConfig;\n  cors: CorsConfig;\n  swagger: SwaggerConfig;\n  security: SecurityConfig;\n}\n\nexport interface NestConfig {\n  port: number;\n}\n\nexport interface CorsConfig {\n  enabled: boolean;\n}\n\nexport interface SwaggerConfig {\n  enabled: boolean;\n  title: string;\n  description: string;\n  version: string;\n  path: string;\n}\n\nexport interface SecurityConfig {\n  expiresIn: string;\n  refreshIn: string;\n  bcryptSaltOrRound: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectUser.html":{"url":"interfaces/SelectUser.html","title":"interface - SelectUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/select-user.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SelectUser {\n  id: true;\n  email: true;\n  firstName?: true;\n  lastName?: true;\n  role: true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/configs/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            enabled\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Config {\n  nest: NestConfig;\n  cors: CorsConfig;\n  swagger: SwaggerConfig;\n  security: SecurityConfig;\n}\n\nexport interface NestConfig {\n  port: number;\n}\n\nexport interface CorsConfig {\n  enabled: boolean;\n}\n\nexport interface SwaggerConfig {\n  enabled: boolean;\n  title: string;\n  description: string;\n  version: string;\n  path: string;\n}\n\nexport interface SecurityConfig {\n  expiresIn: string;\n  refreshIn: string;\n  bcryptSaltOrRound: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenDto {\n  accessToken: string;\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/select-user.dto.ts\n            \n            interface\n            SelectUser\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/token.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/configs/config.interface.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/configs/config.interface.ts\n            \n            interface\n            CorsConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/configs/config.interface.ts\n            \n            interface\n            NestConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/configs/config.interface.ts\n            \n            interface\n            SecurityConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/configs/config.interface.ts\n            \n            interface\n            SwaggerConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/configs/config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/configs/constants/user.constants.ts\n            \n            variable\n            USER_SELECT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^7.2.0\n        \n            @prisma/client : ^5.8.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            nestjs-prisma : ^0.22.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prisma-dbml-generator : ^0.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            config   (src/.../config.ts)\n                        \n                        \n                            USER_SELECT   (src/.../user.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/configs/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Config\n\n                    \n                \n                \n                    \n                        Default value : {\n  nest: {\n    port: parseInt(process.env.PORT),\n  },\n  cors: {\n    enabled: true,\n  },\n  swagger: {\n    enabled: true,\n    title: 'Nest Ecommerce',\n    description: 'Ecommerce built with NestJS',\n    version: '1.0',\n    path: 'api',\n  },\n  security: {\n    expiresIn: '2m',\n    refreshIn: '7d',\n    bcryptSaltOrRound: 10,\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/common/configs/constants/user.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USER_SELECT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  role: true,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
